@isTest
public class WidgetLWCControllerTest {
    
    @testSetup 
    private static void setup(){
        
        Employee__c newTestEmployee = new Employee__c(Job_Title__c = 'Account Manager',
                                                      Name = 'Test');
        insert newTestEmployee; 
    }
    
    @isTest 
    private static void closedLessTimeTest(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name = 'Test' LIMIT 1];
        
        insert TestUtils.createWorkTime(testEmployee.Id, Datetime.now().addHours(-4), Datetime.now().addHours(-1).addMinutes(-20));
        
        Test.startTest();
        String resp = WidgetLWCController.startCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE Employee__c =: testEmployee.Id AND End__c = NULL AND Start__c != NULL AND Event_Origin__c != 'Widget'];                         
        System.assertEquals(1, toSelectWTTest.size());
        System.assertEquals(true, resp.contains('true'));
    }
    
    @isTest 
    private static void workTimeWidgetTest(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        
         insert TestUtils.createWorkTime(testEmployee.Id, Datetime.now().addHours(-4), NULL);
        
        Test.startTest();
        WidgetLWCController.startCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE Event_Origin__c = 'Widget'];                         
        System.assertEquals(1, toSelectWTTest.size());
    }
    
    @isTest 
    private static void recForTodayDoesNotExistTest(){
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        
        Test.startTest();
        WidgetLWCController.startCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE Event_Origin__c = 'Widget'];                         
        System.assertEquals(1, toSelectWTTest.size());
    }
    
    @isTest 
    private static void endCurrentWorkTimeTest(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        

        insert TestUtils.createWorkTime(testEmployee.Id, Datetime.now().addHours(-4), NULL);        
        insert TestUtils.createWorkTime(testEmployee.Id, Datetime.now().addHours(-3), NULL);
        
        Test.startTest();
        WidgetLWCController.endCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE End__c = NULL]; 
        System.assertEquals(0, toSelectWTTest.size());
        Work_Time__c toSelectWorkTimeTest = [SELECT End__c FROM Work_Time__c LIMIT 1];
        System.assertEquals(DateTime.now().hour(), toSelectWorkTimeTest.End__c.hour());
    }
    
    @isTest 
    private static void testExeption(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        
        insert TestUtils.createWorkTime(testEmployee.Id, Datetime.now().addHours(-4), NULL); 
        
        Test.startTest();
        String respEnd = WidgetLWCController.endCurrentWorkTime('testExeptionId');
        String respStart = WidgetLWCController.startCurrentWorkTime('testExeptionId');
        
        Test.stopTest();
        
        System.assertEquals(true, respStart.contains('false'));
        System.assertEquals(true, respStart.contains('Invalid id'));
        System.assertEquals(true, respEnd.contains('false'));
        System.assertEquals(true, respEnd.contains('Record was not found'));
        
    }
    @isTest 
    private static void fetchDataTest(){
        
        
        Profile devProfile = [SELECT Id FROM Profile WHERE Name = 'Developers'];
        
        User newTestUser = TestUtils.createUser(devProfile.Id);
        insert newTestUser;
        
        Employee__c employeeTest = new Employee__c(Name = 'TestToFetchData',
                                                   User__c = newTestUser.Id,
                                                   Job_Title__c = 'Salesforce Developer',
                                                   RequireWorklog__c = true);
        insert employeeTest;  
        
        Test.startTest();
        
        System.runAs(newTestUser){
            
            insert TestUtils.createWorkTime(employeeTest.Id, Datetime.newInstance(Date.today().year(), Date.today().month(), Date.today().day(), 8, 0, 0), Datetime.newInstance(Date.today().year(), Date.today().month(), Date.today().day(), 10, 0, 0));
            insert TestUtils.createWorkTime(employeeTest.Id, Datetime.newInstance(Date.today().year(), Date.today().month(), Date.today().day(), 13, 0, 0), Datetime.newInstance(Date.today().year(), Date.today().month(), Date.today().day(), 17, 0, 0));
            
            insert TestUtils.createWorkLog(employeeTest.Id, 'asd');
            insert TestUtils.createWorkLog(employeeTest.Id, 'sdfasd');
            
            String resultTest = WidgetLWCController.widgetFetchData();
            
            System.assertEquals(true, resultTest.contains('true'));
            System.assertEquals(true, resultTest.contains(employeeTest.Id));
            
        } 
    }   
}
