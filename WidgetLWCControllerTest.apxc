@isTest
public class WidgetLWCControllerTest {
    
    
    @testSetup 
    private static void setup(){
        
        Employee__c newTestEmployee = new Employee__c(Job_Title__c = 'Account Manager',
                                                      Name = 'Test');
        insert newTestEmployee; 
    }
    
    @isTest 
    private static void closedLessTimeTest(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name = 'Test' LIMIT 1];
        
        Work_Time__c newWorkTimeTest = new Work_Time__c (Employee__c = testEmployee.Id,
                                                         Start__c = Datetime.now().addHours(-4),
                                                         End__c =  Datetime.now().addHours(-1).addMinutes(-20));
        insert newWorkTimeTest;
        
        Test.startTest();
        String resp = WidgetLWCController.startCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE Employee__c =: testEmployee.Id AND End__c = NULL AND Start__c != NULL AND Event_Origin__c != 'Widget'];                         
        System.assertEquals(1, toSelectWTTest.size());
        System.assertEquals(true, resp.contains('true'));
    }
    
    @isTest 
    private static void workTimeWidgetTest(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        
        Work_Time__c newWorkTimeTest = new Work_Time__c (Employee__c = testEmployee.Id,
                                                         Start__c = Datetime.now().addHours(-4),
                                                         End__c = NULL);
        insert newWorkTimeTest;
        
        Test.startTest();
        WidgetLWCController.startCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE Event_Origin__c = 'Widget'];                         
        System.assertEquals(1, toSelectWTTest.size());
    }
    
    @isTest 
    private static void recForTodayDoesNotExistTest(){
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        
        Test.startTest();
        WidgetLWCController.startCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE Event_Origin__c = 'Widget'];                         
        System.assertEquals(1, toSelectWTTest.size());
    }
    
    @isTest 
    private static void endCurrentWorkTimeTest(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        
        Work_Time__c firstNewWorkTimeTest = new Work_Time__c (Employee__c = testEmployee.Id,
                                                              Start__c = Datetime.now().addHours(-4),
                                                              End__c = NULL);
        insert firstNewWorkTimeTest;
        
        Work_Time__c secondNewWorkTimeTest = new Work_Time__c (Employee__c = testEmployee.Id,
                                                               Start__c = Datetime.now().addHours(-3),
                                                               End__c = NULL);
        insert secondNewWorkTimeTest;
        
        Test.startTest();
        WidgetLWCController.endCurrentWorkTime(testEmployee.Id);
        Test.stopTest();
        
        List <Work_Time__c> toSelectWTTest = [SELECT End__c FROM Work_Time__c WHERE End__c = NULL]; 
        System.assertEquals(0, toSelectWTTest.size());
        Work_Time__c toSelectWorkTimeTest = [SELECT End__c FROM Work_Time__c WHERE Id =: secondNewWorkTimeTest.Id LIMIT 1];
        System.assertEquals(DateTime.now().hour(), toSelectWorkTimeTest.End__c.hour());
    }
    
    @isTest 
    private static void testExeption(){
        
        Employee__c testEmployee = [SELECT Id FROM Employee__c WHERE Name='Test' LIMIT 1];
        
        Work_Time__c newWorkTimeTest = new Work_Time__c (Employee__c = testEmployee.Id,
                                                         Start__c = Datetime.now().addHours(-4),
                                                         End__c = NULL);
        
        insert newWorkTimeTest;
        Test.startTest();
        String respEnd = WidgetLWCController.endCurrentWorkTime('testExeptionId');
        String respStart = WidgetLWCController.startCurrentWorkTime('testExeptionId');
        
        Test.stopTest();
        
        System.assertEquals(true, respStart.contains('false'));
        System.assertEquals(true, respStart.contains('Invalid id'));
        System.assertEquals(true, respEnd.contains('false'));
        System.assertEquals(true, respEnd.contains('Record was not found'));
        
    }
    @isTest 
    private static void fetchDataTest(){
        
        
        Profile devProfile = [SELECT Id FROM Profile WHERE Name = 'Developers'];
        
        User dev = new User(Username = 'globaltest@test2.test22222',
                            LastName = 'Test',
                            Email = 'test2@test2.test22222',
                            CommunityNickname = 'globalt2',
                            TimeZoneSidKey = 'America/Los_Angeles',
                            LocaleSidKey = 'uk_UA',
                            EmailEncodingKey = 'ISO-8859-1',
                            LanguageLocaleKey = 'en_US',
                            ProfileId = devProfile.Id,
                            Alias = 'globalt2',
                            Google_Apps_Email__c= 'test2@test2.test22222'
                           );
        insert dev;
        
        Employee__c emp = new Employee__c(Name = 'TestToFetchData',
                                         User__c = dev.Id,
                                         Job_Title__c = 'Salesforce Developer',
                                         RequireWorklog__c = true);
        insert emp;  
        
        Test.startTest();

        System.runAs(dev){
            
            Date data1 = Date.today();
            
            Work_Time__c firstWorkTime = new Work_Time__c(Start__c =  Datetime.newInstance(data1.year(), data1.month(), data1.day(), 8, 0, 0),
                                                     End__c = Datetime.newInstance(data1.year(), data1.month(), data1.day(), 10, 0, 0),
                                                     Employee__c = emp.Id);
            
            insert firstWorkTime;
            
            Work_Time__c secondWorkTime = new Work_Time__c(Start__c =  Datetime.newInstance(data1.year(), data1.month(), data1.day(), 13, 0, 0),
                                                      End__c = Datetime.newInstance(data1.year(), data1.month(), data1.day(), 17, 0, 0),
                                                      Employee__c = emp.Id);
            
            insert secondWorkTime;
            
            WorkLog__c firstWorkLog = new WorkLog__c(Description__c = 'asd',
                                           Type1__c = 'Internal',
                                           Type__c = 'Internal Event',
                                           Actual__c = 6,
                                           Date__c = Date.today(),
                                           Employee__c = emp.Id);
            insert firstWorkLog;
            
            WorkLog__c secondWorkLog = new WorkLog__c(Description__c = 'sdfasd',
                                            Type1__c = 'Internal',
                                            Type__c = 'Internal Event',
                                            Actual__c = 6,
                                            Date__c = Date.today(),
                                            Employee__c = emp.Id);
            insert secondWorkLog;
            	String resultTest = WidgetLWCController.widgetFetchData();
           
            System.assertEquals(true, resultTest.contains('true'));
            System.assertEquals(true, resultTest.contains(emp.Id));
            
            
        } 
    }
   
  
}
